/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Consultant as PrismaConsultant,
  Payment as PrismaPayment,
} from "@prisma/client";

export class ConsultantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConsultantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.consultant.count(args);
  }

  async consultants(
    args: Prisma.ConsultantFindManyArgs
  ): Promise<PrismaConsultant[]> {
    return this.prisma.consultant.findMany(args);
  }
  async consultant(
    args: Prisma.ConsultantFindUniqueArgs
  ): Promise<PrismaConsultant | null> {
    return this.prisma.consultant.findUnique(args);
  }
  async createConsultant(
    args: Prisma.ConsultantCreateArgs
  ): Promise<PrismaConsultant> {
    return this.prisma.consultant.create(args);
  }
  async updateConsultant(
    args: Prisma.ConsultantUpdateArgs
  ): Promise<PrismaConsultant> {
    return this.prisma.consultant.update(args);
  }
  async deleteConsultant(
    args: Prisma.ConsultantDeleteArgs
  ): Promise<PrismaConsultant> {
    return this.prisma.consultant.delete(args);
  }

  async findPayments(
    parentId: string,
    args: Prisma.PaymentFindManyArgs
  ): Promise<PrismaPayment[]> {
    return this.prisma.consultant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payments(args);
  }
}
