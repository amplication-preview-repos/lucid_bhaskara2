/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ConsultantService } from "../consultant.service";
import { ConsultantCreateInput } from "./ConsultantCreateInput";
import { Consultant } from "./Consultant";
import { ConsultantFindManyArgs } from "./ConsultantFindManyArgs";
import { ConsultantWhereUniqueInput } from "./ConsultantWhereUniqueInput";
import { ConsultantUpdateInput } from "./ConsultantUpdateInput";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { PaymentWhereUniqueInput } from "../../payment/base/PaymentWhereUniqueInput";

export class ConsultantControllerBase {
  constructor(protected readonly service: ConsultantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Consultant })
  async createConsultant(
    @common.Body() data: ConsultantCreateInput
  ): Promise<Consultant> {
    return await this.service.createConsultant({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        specialization: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Consultant] })
  @ApiNestedQuery(ConsultantFindManyArgs)
  async consultants(@common.Req() request: Request): Promise<Consultant[]> {
    const args = plainToClass(ConsultantFindManyArgs, request.query);
    return this.service.consultants({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        specialization: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Consultant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async consultant(
    @common.Param() params: ConsultantWhereUniqueInput
  ): Promise<Consultant | null> {
    const result = await this.service.consultant({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        specialization: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Consultant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateConsultant(
    @common.Param() params: ConsultantWhereUniqueInput,
    @common.Body() data: ConsultantUpdateInput
  ): Promise<Consultant | null> {
    try {
      return await this.service.updateConsultant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          specialization: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Consultant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteConsultant(
    @common.Param() params: ConsultantWhereUniqueInput
  ): Promise<Consultant | null> {
    try {
      return await this.service.deleteConsultant({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          specialization: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/payments")
  @ApiNestedQuery(PaymentFindManyArgs)
  async findPayments(
    @common.Req() request: Request,
    @common.Param() params: ConsultantWhereUniqueInput
  ): Promise<Payment[]> {
    const query = plainToClass(PaymentFindManyArgs, request.query);
    const results = await this.service.findPayments(params.id, {
      ...query,
      select: {
        amount: true,

        consultant: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        method: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/payments")
  async connectPayments(
    @common.Param() params: ConsultantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        connect: body,
      },
    };
    await this.service.updateConsultant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/payments")
  async updatePayments(
    @common.Param() params: ConsultantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        set: body,
      },
    };
    await this.service.updateConsultant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/payments")
  async disconnectPayments(
    @common.Param() params: ConsultantWhereUniqueInput,
    @common.Body() body: PaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      payments: {
        disconnect: body,
      },
    };
    await this.service.updateConsultant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
